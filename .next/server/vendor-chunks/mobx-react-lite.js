"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mobx-react-lite";
exports.ids = ["vendor-chunks/mobx-react-lite"];
exports.modules = {

/***/ "(ssr)/./node_modules/mobx-react-lite/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mobx-react-lite/dist/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./mobxreactlite.cjs.development.js */ \"(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw0SkFBOEQ7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYWJyaWMtdmlkZW8tZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9kaXN0L2luZGV4LmpzPzA2YjgiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vYnhyZWFjdGxpdGUuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2J4cmVhY3RsaXRlLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mobx-react-lite/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar mobx = __webpack_require__(/*! mobx */ \"(ssr)/./node_modules/mobx/dist/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\nif (!React.useState) {\n  throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\nif (!mobx.makeObservable) {\n  throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\");\n}\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n    {\n      console.warn(\"[MobX] Failed to get unstable_batched updates from react-dom / react-native\");\n    }\n  }\n  mobx.configure({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function isObserverBatched() {\n  {\n    console.warn(\"[MobX] Deprecated\");\n  }\n  return true;\n};\n\nvar deprecatedMessages = [];\nfunction useDeprecated(msg) {\n  if (!deprecatedMessages.includes(msg)) {\n    deprecatedMessages.push(msg);\n    console.warn(msg);\n  }\n}\n\nfunction printDebugValue(v) {\n  return mobx.getDependencyTree(v);\n}\n\nvar REGISTRY_FINALIZE_AFTER = 10000;\nvar REGISTRY_SWEEP_INTERVAL = 10000;\nvar TimerBasedFinalizationRegistry = /*#__PURE__*/function () {\n  function TimerBasedFinalizationRegistry(finalize) {\n    var _this = this;\n    this.finalize = void 0;\n    this.registrations = new Map();\n    this.sweepTimeout = void 0;\n    this.sweep = function (maxAge) {\n      if (maxAge === void 0) {\n        maxAge = REGISTRY_FINALIZE_AFTER;\n      }\n      // cancel timeout so we can force sweep anytime\n      clearTimeout(_this.sweepTimeout);\n      _this.sweepTimeout = undefined;\n      var now = Date.now();\n      _this.registrations.forEach(function (registration, token) {\n        if (now - registration.registeredAt >= maxAge) {\n          _this.finalize(registration.value);\n          _this.registrations[\"delete\"](token);\n        }\n      });\n      if (_this.registrations.size > 0) {\n        _this.scheduleSweep();\n      }\n    };\n    this.finalizeAllImmediately = function () {\n      _this.sweep(0);\n    };\n    this.finalize = finalize;\n  }\n  // Token is actually required with this impl\n  var _proto = TimerBasedFinalizationRegistry.prototype;\n  _proto.register = function register(target, value, token) {\n    this.registrations.set(token, {\n      value: value,\n      registeredAt: Date.now()\n    });\n    this.scheduleSweep();\n  };\n  _proto.unregister = function unregister(token) {\n    this.registrations[\"delete\"](token);\n  }\n  // Bound so it can be used directly as setTimeout callback.\n  ;\n  _proto.scheduleSweep = function scheduleSweep() {\n    if (this.sweepTimeout === undefined) {\n      this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);\n    }\n  };\n  return TimerBasedFinalizationRegistry;\n}();\nvar UniversalFinalizationRegistry = typeof FinalizationRegistry !== \"undefined\" ? FinalizationRegistry : TimerBasedFinalizationRegistry;\n\nvar observerFinalizationRegistry = /*#__PURE__*/new UniversalFinalizationRegistry(function (adm) {\n  var _adm$reaction;\n  (_adm$reaction = adm.reaction) == null ? void 0 : _adm$reaction.dispose();\n  adm.reaction = null;\n});\n\nvar globalIsUsingStaticRendering = false;\nfunction enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\" + baseComponentName;\n}\n/**\r\n * We use class to make it easier to detect in heap snapshots by name\r\n */\nvar ObjectToBeRetainedByReact = function ObjectToBeRetainedByReact() {};\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact();\n}\nfunction useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n  var _React$useState = React__default.useState(objectToBeRetainedByReactFactory),\n    objectRetainedByReact = _React$useState[0];\n  // Force update, see #2982\n  var _React$useState2 = React__default.useState(),\n    setState = _React$useState2[1];\n  var forceUpdate = function forceUpdate() {\n    return setState([]);\n  };\n  // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n  var admRef = React__default.useRef(null);\n  if (!admRef.current) {\n    // First render\n    admRef.current = {\n      reaction: null,\n      mounted: false,\n      changedBeforeMount: false\n    };\n  }\n  var adm = admRef.current;\n  if (!adm.reaction) {\n    // First render or component was not committed and reaction was disposed by registry\n    adm.reaction = new mobx.Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (adm.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        adm.changedBeforeMount = true;\n      }\n    });\n    observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);\n  }\n  React__default.useDebugValue(adm.reaction, printDebugValue);\n  React__default.useEffect(function () {\n    observerFinalizationRegistry.unregister(adm);\n    adm.mounted = true;\n    if (adm.reaction) {\n      if (adm.changedBeforeMount) {\n        // Got a change before mount, force an update\n        adm.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      adm.reaction = new mobx.Reaction(observerComponentNameFor(baseComponentName), function () {\n        // We've definitely already been mounted at this point\n        forceUpdate();\n      });\n      forceUpdate();\n    }\n    return function () {\n      adm.reaction.dispose();\n      adm.reaction = null;\n      adm.mounted = false;\n      adm.changedBeforeMount = false;\n    };\n  }, []);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var rendering;\n  var exception;\n  adm.reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}\n\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol[\"for\"];\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol ? /*#__PURE__*/Symbol[\"for\"](\"react.forward_ref\") : typeof React.forwardRef === \"function\" && /*#__PURE__*/React.forwardRef(function (props) {\n  return null;\n})[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol ? /*#__PURE__*/Symbol[\"for\"](\"react.memo\") : typeof React.memo === \"function\" && /*#__PURE__*/React.memo(function (props) {\n  return null;\n})[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nfunction observer(baseComponent,\n// TODO remove in next major\noptions) {\n  var _options$forwardRef;\n  if ( warnObserverOptionsDeprecated && options) {\n    warnObserverOptionsDeprecated = false;\n    console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`\");\n  }\n  if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n    throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n  }\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var useForwardRef = (_options$forwardRef = options == null ? void 0 : options.forwardRef) != null ? _options$forwardRef : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n  if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent[\"render\"];\n    if (typeof render !== \"function\") {\n      throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n    }\n  }\n  var observerComponent = function observerComponent(props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  };\n  // Don't set `displayName` for anonymous components,\n  // so the `displayName` can be customized by user, see #3192.\n  if (baseComponentName !== \"\") {\n    observerComponent.displayName = baseComponentName;\n  }\n  // Support legacy context: `contextTypes` must be applied before `memo`\n  if (baseComponent.contextTypes) {\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n    observerComponent = React.forwardRef(observerComponent);\n  }\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  observerComponent = React.memo(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n  {\n    Object.defineProperty(observerComponent, \"contextTypes\", {\n      set: function set() {\n        var _this$type;\n        throw new Error(\"[mobx-react-lite] `\" + (this.displayName || ((_this$type = this.type) == null ? void 0 : _this$type.displayName) || \"Component\") + \".contextTypes` must be set before applying `observer`.\");\n      }\n    });\n  }\n  return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don't redefine `displayName`,\n  // it's defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n\nfunction ObserverComponent(_ref) {\n  var children = _ref.children,\n    render = _ref.render;\n  var component = children || render;\n  if (typeof component !== \"function\") {\n    return null;\n  }\n  return useObserver(component);\n}\n{\n  ObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n  };\n}\nObserverComponent.displayName = \"Observer\";\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === \"children\" ? \"render\" : \"children\";\n  var hasProp = typeof props[key] === \"function\";\n  var hasExtraProp = typeof props[extraKey] === \"function\";\n  if (hasProp && hasExtraProp) {\n    return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n  }\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n  return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + typeof props[key] + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n}\n\nfunction useLocalObservable(initializer, annotations) {\n  return React.useState(function () {\n    return mobx.observable(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n\nfunction useAsObservableSource(current) {\n  useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n  var _useState = React.useState(function () {\n      return mobx.observable(current, {}, {\n        deep: false\n      });\n    }),\n    res = _useState[0];\n  mobx.runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n\nfunction useLocalStore(initializer, current) {\n  useDeprecated(\"[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.\");\n  var source = current && useAsObservableSource(current);\n  return React.useState(function () {\n    return mobx.observable(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n\nvar _observerFinalization;\nobserverBatching(reactDom.unstable_batchedUpdates);\nvar clearTimers = (_observerFinalization = observerFinalizationRegistry[\"finalizeAllImmediately\"]) != null ? _observerFinalization : function () {};\nfunction useObserver$1(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  {\n    useDeprecated(\"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\");\n  }\n  return useObserver(fn, baseComponentName);\n}\nfunction useStaticRendering(enable) {\n  {\n    console.warn(\"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\");\n  }\n  enableStaticRendering(enable);\n}\n\nexports.Observer = ObserverComponent;\nexports.clearTimers = clearTimers;\nexports.enableStaticRendering = enableStaticRendering;\nexports.isObserverBatched = isObserverBatched;\nexports.isUsingStaticRendering = isUsingStaticRendering;\nexports.observer = observer;\nexports.observerBatching = observerBatching;\nexports.useAsObservableSource = useAsObservableSource;\nexports.useLocalObservable = useLocalObservable;\nexports.useLocalStore = useLocalStore;\nexports.useObserver = useObserver$1;\nexports.useStaticRendering = useStaticRendering;\n//# sourceMappingURL=mobxreactlite.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js\n");

/***/ })

};
;